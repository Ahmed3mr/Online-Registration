@page "/Registration"
@page "/Registration/{studentid:int}"
@using System.Text.Json;
@using OnlineRegistration.Client.Models;


<h3>Registration</h3>





@if (schedules == null)
{
    <p><em>loading...</em></p>
}
else
{

    <BSInput InputType="InputType.Select"  @bind-Value="chosencourseid" @onchange="GetClassroom">
        <option >First Choose a Course</option>

        @foreach(CourseModel course in courses)
        {
            <option value="@course.CourseId">@course.Name</option>
        }
    </BSInput>



    <BSInput InputType="InputType.Select"  @bind-Value="chosenclassroomid"  @onchange="addclassroom" >
    <option >Then Choose a Classroom</option>
    @if(classrooms==null){
            <option >Please choose a course first</option>
        }
        else
        {
             @foreach(ClassroomModel classroom in classrooms)
        {
                <option value="@classroom.Id" >@classroom.LecturerName - @classroom.SlotName</option>
        }
        }
       
    </BSInput>



    <BSTable Color=BSColor.Light IsBordered=true IsStriped=true>
        <BSTHead>
            <BSTR>
                <BSTD>Day</BSTD>
                <BSTD>8:30 -> 10:10</BSTD>
                <BSTD>10:30 -> 12:10</BSTD>
                <BSTD>12:30 -> 2:10</BSTD>
                <BSTD>2:30 -> 4:10</BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            <BSTR>
                <BSTD AlignRow=AlignRow.Middle> Saturday </BSTD>


                @for (int i = 0; i < 4; i++)
                {
                    if (x < 20)
                    {
                        if (x % 10 == 4) { x += 7; }
                        else { x += 1; }
                        emptySlotIndicator = false;
                        foreach (ScheduleSlotModel schedule in schedules)
                        {
                            if (schedule.SlotNumber == x)
                            {
                                emptySlotIndicator = true;
                                <BSTD>
                                    @schedule.CourseName<br />
                                    @schedule.LecturerName
                                </BSTD>
                            }
                        }

                        if (emptySlotIndicator == false)
                        {
                            <BSTD>

                            </BSTD>
                        }

                    }
                }

            </BSTR>

            <BSTR>
                <BSTD AlignRow=AlignRow.Middle> Sunday </BSTD>


                @for (int i = 0; i < 4; i++)
                {
                    if (x < 30)
                    {
                        if (x % 10 == 4) { x += 7; }
                        else { x += 1; }
                        emptySlotIndicator = false;
                        foreach (ScheduleSlotModel schedule in schedules)
                        {
                            if (schedule.SlotNumber == x)
                            {
                                emptySlotIndicator = true;
                                <BSTD>
                                    @schedule.CourseName<br />
                                    @schedule.LecturerName
                                </BSTD>
                            }
                        }

                        if (emptySlotIndicator == false)
                        {
                            <BSTD>

                            </BSTD>
                        }

                    }

                }

            </BSTR>

            <BSTR>
                <BSTD AlignRow=AlignRow.Middle> monday </BSTD>


                @for (int i = 0; i < 4; i++)
                {
                    if (x < 40)
                    {
                        if (x % 10 == 4) { x += 7; }
                        else { x += 1; }
                        emptySlotIndicator = false;
                        foreach (ScheduleSlotModel schedule in schedules)
                        {
                            if (schedule.SlotNumber == x)
                            {
                                emptySlotIndicator = true;
                                <BSTD>
                                    @schedule.CourseName<br />
                                    @schedule.LecturerName
                                </BSTD>
                            }
                        }

                        if (emptySlotIndicator == false)
                        {
                            <BSTD>

                            </BSTD>
                        }

                    }

                }

            </BSTR>

            <BSTR>
                <BSTD AlignRow=AlignRow.Middle> tuesday </BSTD>


                @for (int i = 0; i < 4; i++)
                {
                    if (x < 50)
                    {
                        if (x % 10 == 4) { x += 7; }
                        else { x += 1; }
                        emptySlotIndicator = false;
                        foreach (ScheduleSlotModel schedule in schedules)
                        {
                            if (schedule.SlotNumber == x)
                            {
                                emptySlotIndicator = true;
                                <BSTD>
                                    @schedule.CourseName<br />
                                    @schedule.LecturerName
                                </BSTD>
                            }
                        }

                        if (emptySlotIndicator == false)
                        {
                            <BSTD>

                            </BSTD>
                        }

                    }
                }


            </BSTR>

            <BSTR>
                <BSTD AlignRow=AlignRow.Middle> wednesday </BSTD>


                @for (int i = 0; i < 4; i++)
                {
                    if (x < 60)
                    {
                        if (x % 10 == 4) { x += 7; }
                        else { x += 1; }
                        emptySlotIndicator = false;
                        foreach (ScheduleSlotModel schedule in schedules)
                        {
                            if (schedule.SlotNumber == x)
                            {
                                emptySlotIndicator = true;
                                <BSTD>
                                    @schedule.CourseName<br />
                                    @schedule.LecturerName
                                </BSTD>
                            }
                        }

                        if (emptySlotIndicator == false)
                        {
                            <BSTD>

                            </BSTD>
                        }

                    }
                }


            </BSTR>

            <BSTR>
                <BSTD AlignRow=AlignRow.Middle> thursday </BSTD>


                @for (int i = 0; i < 4; i++)
                {
                    if (x < 70)
                    {
                        if (x % 10 == 4) { x += 7; }
                        else { x += 1; }
                        emptySlotIndicator = false;
                        foreach (ScheduleSlotModel schedule in schedules)
                        {
                            if (schedule.SlotNumber == x)
                            {
                                emptySlotIndicator = true;
                                <BSTD>
                                    @schedule.CourseName<br />
                                    @schedule.LecturerName
                                </BSTD>
                            }
                        }

                        if (emptySlotIndicator == false)
                        {
                            <BSTD>
                                
                            </BSTD>
                        }

                    }
                }


            </BSTR>

        </BSTBody>
        <BSTFoot>

        </BSTFoot>
    </BSTable>

    <button @onclick="Registrate">Register</button>

}




@code {
    [Inject]
    public HttpClient httpClient { get; set; }

    [Parameter]
    public int studentid { get; set; }

    public RegPeriodModel? regPeriod;
    public List<ScheduleSlotModel>? schedules;
    public IEnumerable<CourseModel>? courses;
    public List<ClassroomModel>? classrooms;
    public List<int>? classroomIds = new List<int>();
    public Dictionary<int, string> gadwal;
    public int chosencourseid;
    public int chosenclassroomid;
    public int x = 10;
    public bool emptySlotIndicator;
    public bool classroomDropdown=false;
    public int f;

    protected override async Task OnInitializedAsync()
    {
        if (studentid == 0) studentid = 2;
        //if (chosencourseid == 0) chosencourseid = 1;
        Console.WriteLine(classrooms);

        regPeriod = await JsonSerializer.DeserializeAsync<RegPeriodModel>
         (await httpClient.GetStreamAsync("RegPeriod/LastRegPeriod"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

         if(regPeriod !=null){
        schedules = await JsonSerializer.DeserializeAsync<List<ScheduleSlotModel>>
        (await httpClient.GetStreamAsync($"Schedule/LastRegistered?studentId={studentid}&regpid={regPeriod.ID}"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
         }
        courses = await JsonSerializer.DeserializeAsync<IEnumerable<CourseModel>>
       (await httpClient.GetStreamAsync($"Schedule/AvailableCourses?studentid={studentid}"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

        

    }

    public async Task GetClassroom(ChangeEventArgs ex)
    {
        string x = ex.Value.ToString();
        if(x != "0"){
            classrooms = await JsonSerializer.DeserializeAsync<List<ClassroomModel>>
           (await httpClient.GetStreamAsync($"Schedule/AvailableClassrooms?CourseId={ex.Value}"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
            classroomDropdown = true;
            Console.WriteLine(classrooms.FirstOrDefault().LecturerName+classroomDropdown);
        }
        else
        {
            classrooms = null;
        }
    }

    public void addclassroom(ChangeEventArgs ex)
    {
        var x = int.Parse(string.Format("{0}", ex.Value));
        Console.WriteLine(x);
        classroomIds.Add(x);
        Console.WriteLine(classroomIds.Count());
        ClassroomModel cla = classrooms.Where(a => a.Id == x).FirstOrDefault();

        schedules.Add(new ScheduleSlotModel
            {
                Id = cla.Id,
                LecturerName = cla.LecturerName,
                SlotNumber = cla.SlotName
            });

        Console.WriteLine(schedules.Count());



    }

    protected async Task Registrate()
    {
        if (classroomIds != null)
        {
            if (regPeriod != null && classroomIds.Count() != 0)
            {
                RegisterModel? reg = new RegisterModel()
                    {
                        studentId = studentid,
                        regperiodId = regPeriod.ID,
                        classroomIds = classroomIds

                    };
                //reg.studentId = studentid;
                //reg.regperiodId = regPeriod.ID;
                //reg.classroomIds = classroomIds;

                var result = await httpClient.PostAsJsonAsync($"Schedule/Register", reg);
                Console.WriteLine(result);
            }
        }
    }



}
